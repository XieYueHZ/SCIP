(define (square x)
        (* x x))

(define (even? n)
        (= (remainder n 2) 0))

(define (fib n)
        (fib-iter 1 0 0 1 n))

(define (fib-iter a b p q count)
        (cond ((= count 0) b)
              ((even? count)
               (fib-iter a
                         b
                         (+ (square p) (square q))
                         (+ (* 2 p q) (square q))
                         (/ count 2)))
              (else (fib-iter (+ (* b q) (* a q) (* a p))
                              (+ (* b p) (* a q))
                              p
                              q
                              (- count 1)))))
(display (fib 1))
(display "\n")
(display (fib 2))
(display "\n")
(display (fib 3))
(display "\n")
(display (fib 4))
(display "\n")
(display (fib 5))
(display "\n")
(display (fib 6))
(display "\n")
(display (fib 7))
(display "\n")
(display (fib 8))
(display "\n")
(display (fib 9))
(display "\n")
(display (fib 10))
(display "\n")
(exit)