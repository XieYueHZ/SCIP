(load "2.3.4_huffman.scm")
(load "2.3.3_set.scm")
(define (encode message tree)
        (if (null? message)
            `()
            (append (encode-symbol (car message) tree)
                    (encode (cdr message) tree))))

(define (encode-symbol word tree)
        (define (iter result branch)
                (let ((lb (left-branch branch))
                      (rb (right-branch branch)))
                     (if (element-of-set? word (symbols lb))
                         (if (leaf? lb)
                             (append result (list 0))
                             (iter (append result (list 0)) lb))
                         (if (leaf? rb)
                             (append result (list 1))
                             (iter (append result (list 1)) rb)))))
        (if (element-of-set? word (symbols tree))
            (iter `() tree)
            (error "bad word -- ENCODE-SYMBOL" word)))
            
(define sample-tree
        (make-code-tree (make-leaf 'A 4)
                        (make-code-tree (make-leaf 'B 2)
                                        (make-code-tree (make-leaf 'D 1)
                                                        (make-leaf 'C 1)))))

(define m (encode `(A D A B B C A) sample-tree))
(display m)
(exit)