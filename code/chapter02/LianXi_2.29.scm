(define (make-mobile left right)
        (list left right))

(define (make-branch length structure)
        (list length structure))

(define (left-branch mobile)
        (car mobile))

(define (right-branch mobile)
        (car (cdr mobile)))

(define (branch-length branch)
        (car branch))

(define (branch-structure branch)
        (car (cdr branch)))


; (define (make-mobile left right)
;         (cons left right))

; (define (make-branch length structure)
;         (cons length structure))

; (define (left-branch mobile)
;         (car mobile))
; (define (right-branch mobile)
;         (cdr mobile))
; (define (branch-length branch)
;         (car branch))
; (define (branch-structure branch)
;         (cdr branch))

(define (total-weight mobile)
        (define (have-mobile? branch)
                (if (pair? branch)
                    (pair? (branch-structure branch))
                    #f))
        (define (branch-weight branch)
                (if (have-mobile? branch)
                    (total-weight (branch-structure branch))
                    (branch-structure branch)))
        (+ (branch-weight (left-branch mobile))
           (branch-weight (right-branch mobile))))

(define (balance? mobile)
        (define (have-mobile? branch)
                (if (pair? branch)
                    (pair? (branch-structure branch))
                    #f))
        (define (branch-weight branch)
                (if (have-mobile? branch)
                    (total-weight (branch-structure branch))
                    (branch-structure branch)))
        (define (left-moment m)
                (* (branch-length (left-branch m))
                   (branch-weight (left-branch m))))
        (define (right-moment m)
                (* (branch-length (right-branch m))
                   (branch-weight (right-branch m))))
        (define (balance-branch? branch)
                (let ((next (branch-structure branch)))
                     (if (have-mobile? branch)
                         (balance? next)
                         #t)))
        (if (pair? mobile)
            (if (= (left-moment mobile) (right-moment mobile))
                (and (balance-branch? (left-branch mobile)) (balance-branch? (right-branch mobile)))
                #f)
            #t))

(define lb (make-branch 100 15))
(define rb (make-branch 30 50))
(define m (make-mobile lb rb))

; (display (total-weight m))
; (newline)
; (display (balance? m))
; (newline)
(define lb2 (make-branch 6 12))
(define rb2 (make-branch 7 m))
(define m2 (make-mobile lb2 rb2))
; (display (total-weight m2))
; (newline)
; (display (balance? m2))
; (newline)
(define blb (make-branch 150 10))
(define mb (make-mobile lb blb))
; (display (balance? mb))
; (newline)
(define rb3 (make-branch 7 m))
(define rb4 (make-branch 8 m2))
(define mmb (make-mobile rb4 rb3))
(display mmb)
(newline)
(display (total-weight mmb))
; (newline)
; (display (balance? mmb))
(exit)
